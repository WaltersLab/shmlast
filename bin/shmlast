#!/usr/bin/env python3

import argparse
import os
import sys

from shmlast.app import RBL, CRBL
from shmlast.util import prog_string
from shmlast import __version__


def rbl_func(args):
    print(prog_string('Reciprocal Best LAST', 
                      __version__, args.action))
    rbl = RBL(args.query, args.database, args.output, 
              n_threads=args.n_threads, cutoff=args.evalue_cutoff,
              pbs=args.pbs)
    return rbl.run(doit_args=[args.action], 
                   profile_fn=args.profile and args.profile_output)


def crbl_func(args):
    print(prog_string('Conditional Reciprocal Best LAST', 
                      __version__, args.action))

    crbl = CRBL(args.query, args.database, args.output,
                n_threads=args.n_threads, cutoff=args.evalue_cutoff,
                pbs=args.pbs)
    return crbl.run(doit_args=[args.action], 
                    profile_fn=args.profile and args.profile_output)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + __version__)
    subparsers = parser.add_subparsers()

    def add_common_args(p):
        p.add_argument('-q', '--query', required=True)
        p.add_argument('-d', '--database', required=True)
        p.add_argument('-o', '--output')
        p.add_argument('--n_threads', type=int, default=1)
        p.add_argument('-e', '--evalue-cutoff', default=0.00001, type=float)
        p.add_argument('--action', default='run')
        p.add_argument('--profile', action='store_true', default=False)
        p.add_argument('--profile-output', default=None)
        p.add_argument('--pbs', action='store_true', default=False)

        return p

    rbl_parser = add_common_args(subparsers.add_parser('rbl'))
    rbl_parser.set_defaults(func=rbl_func)

    crbl_parser = add_common_args(subparsers.add_parser('crbl'))
    crbl_parser.set_defaults(func=crbl_func)

    args = parser.parse_args()
    return args.func(args)
  

if __name__ == '__main__':
    sys.exit(main())
